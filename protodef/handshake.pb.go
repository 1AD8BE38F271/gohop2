// Code generated by protoc-gen-go.
// source: handshake.proto
// DO NOT EDIT!

package protodef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Handshake struct {
	Header *PacketHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *Handshake) Reset()                    { *m = Handshake{} }
func (m *Handshake) String() string            { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()               {}
func (*Handshake) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Handshake) GetHeader() *PacketHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type HandshakeAck struct {
	Header   *PacketHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Ip       uint32        `protobuf:"varint,2,opt,name=ip" json:"ip,omitempty"`
	ServerIp uint32        `protobuf:"varint,3,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	MarkSize uint32        `protobuf:"varint,4,opt,name=mark_size,json=markSize" json:"mark_size,omitempty"`
}

func (m *HandshakeAck) Reset()                    { *m = HandshakeAck{} }
func (m *HandshakeAck) String() string            { return proto.CompactTextString(m) }
func (*HandshakeAck) ProtoMessage()               {}
func (*HandshakeAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *HandshakeAck) GetHeader() *PacketHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Handshake)(nil), "protodef.Handshake")
	proto.RegisterType((*HandshakeAck)(nil), "protodef.HandshakeAck")
}

func init() { proto.RegisterFile("handshake.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0xcc, 0x4b,
	0x29, 0xce, 0x48, 0xcc, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x29,
	0xa9, 0x69, 0x52, 0x3c, 0x19, 0xa9, 0x89, 0x29, 0xa9, 0x45, 0x10, 0x71, 0x25, 0x6b, 0x2e, 0x4e,
	0x0f, 0x98, 0x52, 0x21, 0x3d, 0x2e, 0x36, 0x88, 0xa4, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91,
	0x98, 0x1e, 0x4c, 0x97, 0x5e, 0x40, 0x62, 0x72, 0x76, 0x6a, 0x89, 0x07, 0x58, 0x36, 0x08, 0xaa,
	0x4a, 0xa9, 0x83, 0x91, 0x8b, 0x07, 0xae, 0xdb, 0x31, 0x39, 0x9b, 0x54, 0x03, 0x84, 0xf8, 0xb8,
	0x98, 0x32, 0x0b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x78, 0x83, 0x98, 0x32, 0x0b, 0x84, 0xa4, 0xb9,
	0x38, 0x8b, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0xe2, 0x33, 0x0b, 0x24, 0x98, 0xc1, 0xc2, 0x1c, 0x10,
	0x01, 0x4f, 0xb0, 0x64, 0x6e, 0x62, 0x51, 0x76, 0x7c, 0x71, 0x66, 0x55, 0xaa, 0x04, 0x0b, 0x44,
	0x12, 0x24, 0x10, 0x9c, 0x59, 0x95, 0x9a, 0xc4, 0x06, 0xb6, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0xb7, 0xef, 0xd5, 0xf9, 0x00, 0x00, 0x00,
}
